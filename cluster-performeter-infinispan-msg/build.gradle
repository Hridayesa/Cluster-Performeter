group 'org.vs.performeter'
version '1.0-SNAPSHOT'

apply plugin: 'application'
apply plugin: 'org.springframework.boot'

dependencies {
    compile project(':cluster-performeter-core')
//    compile 'org.infinispa:infinispan-embeddeds:8.2.5.Final'
    compile 'org.infinispan:infinispan-embedded:8.2.5.Final'
//    compile 'org.springframework:spring-tx'
}

// Генерация дистрибутива
// два набора запускающих скриптов
mainClassName = "org.vs.performeter.tester.TesterMain"
applicationDefaultJvmArgs = ['-Dhazelcast.config=../config/hazelcast.xml', '-Duser.language=ru', '-Duser.region=RU', '-Dfile.encoding=UTF-8', '-Dspring.config.location=../config']

task moreStartScripts(type: CreateStartScripts) {
    mainClassName = "org.vs.performeter.analyser.RunnerMain"
    applicationName = "analizer"
    defaultJvmOpts = ['-Dhazelcast.config=../config/hazelcast.xml', '-Duser.language=ru', '-Duser.region=RU', '-Dfile.encoding=UTF-8', '-Dspring.config.location=../config']
    outputDir = new File(project.buildDir, 'scripts')
    classpath = jar.outputs.files + project.configurations.runtime

    doLast {
        def winScriptFile  = file getWindowsScript()
        def winFileText = winScriptFile.text
        winFileText = winFileText.replaceAll('set CLASSPATH=.*', 'rem original CLASSPATH declaration replaced by:\nset CLASSPATH=%APP_HOME%/lib/*')
        winScriptFile.text = winFileText
    }
}

applicationDistribution.into("bin") {
    from(moreStartScripts)
    fileMode = 0755
}

task runTester(type: JavaExec, dependsOn: test){
    main = 'org.vs.performeter.tester.TesterMain'
    classpath = sourceSets.test.runtimeClasspath
}

task runAnalyzer(type: JavaExec, dependsOn: test){
    main = 'org.vs.performeter.tester.RunnerMain'
    classpath = sourceSets.test.runtimeClasspath
}

startScripts {
    doLast {
        def winScriptFile  = file getWindowsScript()
        def winFileText = winScriptFile.text
        winFileText = winFileText.replaceAll('set CLASSPATH=.*', 'rem original CLASSPATH declaration replaced by:\nset CLASSPATH=%APP_HOME%/lib/*')
        winScriptFile.text = winFileText
    }
}

distributions {
    main {
        contents {
            from("src/main/resources") {
                include 'application.yml'
                include 'hazelcast.xml'
                into "config"
            }
        }
    }
}
